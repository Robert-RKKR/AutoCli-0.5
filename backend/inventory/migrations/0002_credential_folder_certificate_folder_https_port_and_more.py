# Generated by Django 4.0.2 on 2022-02-18 15:41

import autocli.basemodel.validators
from django.db import migrations, models
import django.db.models.deletion
import inventory.validators


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.CharField(editable=False, max_length=35, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Object create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Object last update date.', verbose_name='Updated')),
                ('deleted', models.BooleanField(default=False)),
                ('root', models.BooleanField(default=False, help_text='Root object is not deletable.', verbose_name='Root')),
                ('active', models.BooleanField(default=True, help_text='Status of Model object.', verbose_name='Active')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 4 to 32 digits, letters and special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'Model with this name already exists.'}, max_length=32, unique=True, validators=[autocli.basemodel.validators.NameValueValidator()])),
                ('description', models.CharField(default='Model description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[autocli.basemodel.validators.DescriptionValueValidator()])),
                ('username', models.CharField(error_messages={'blank': 'Username field is mandatory.', 'invalid': 'Enter the correct username value.', 'null': 'Username field is mandatory.'}, help_text='Local / remote user name.', max_length=64, verbose_name='Username')),
                ('password', models.CharField(blank=True, help_text='Local / remote user password.', max_length=64, null=True, verbose_name='Password')),
            ],
            options={
                'verbose_name': 'Model',
                'verbose_name_plural': 'Models',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='folder',
            name='certificate',
            field=models.BooleanField(default=False, help_text='Folder default certificate check status.', verbose_name='Default certificate'),
        ),
        migrations.AddField(
            model_name='folder',
            name='https_port',
            field=models.IntegerField(default=443, help_text='Folder default HTTPS protocol port number.', verbose_name='Default HTTPS port'),
        ),
        migrations.AddField(
            model_name='folder',
            name='ico',
            field=models.IntegerField(choices=[(0, 'static/ico/model/device/switch.svg'), (1, 'static/ico/model/device/border_router.svg'), (2, 'static/ico/model/device/chassis.svg'), (3, 'static/ico/model/device/console.svg'), (4, 'static/ico/model/device/firewall.svg'), (5, 'static/ico/model/device/router.svg'), (6, 'static/ico/model/device/router_firewall.svg'), (7, 'static/ico/model/device/router_wifi_1.svg'), (8, 'static/ico/model/device/router_wifi_2.svg'), (9, 'static/ico/model/device/stack.svg'), (10, 'static/ico/model/device/stack_firewall_1.svg'), (11, 'static/ico/model/device/stack_firewall_2.svg'), (12, 'static/ico/model/device/switch.svg'), (13, 'static/ico/model/device/wifi-connection.svg'), (14, 'static/ico/model/device/wireless-router.svg')], default=0, help_text='Folder default network device graphic representation.', verbose_name='Default device Icon'),
        ),
        migrations.AddField(
            model_name='folder',
            name='secret',
            field=models.CharField(blank=True, help_text='Folder default network device secret password.', max_length=64, null=True, verbose_name='Default secret'),
        ),
        migrations.AddField(
            model_name='folder',
            name='ssh_port',
            field=models.IntegerField(default=22, help_text='Folder default SSH protocol port number.', verbose_name='Default SSH port'),
        ),
        migrations.AlterField(
            model_name='folder',
            name='id',
            field=models.CharField(editable=False, max_length=35, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='folder',
            name='root_folder',
            field=models.ForeignKey(blank=True, help_text='The parent folder to witch the current folder belongs.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.folder', verbose_name='Root folder'),
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.CharField(editable=False, max_length=35, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Object create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Object last update date.', verbose_name='Updated')),
                ('deleted', models.BooleanField(default=False)),
                ('root', models.BooleanField(default=False, help_text='Root object is not deletable.', verbose_name='Root')),
                ('active', models.BooleanField(default=True, help_text='Status of Model object.', verbose_name='Active')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 4 to 32 digits, letters and special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'Model with this name already exists.'}, max_length=32, unique=True, validators=[autocli.basemodel.validators.NameValueValidator()])),
                ('description', models.CharField(default='Model description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, max_length=256, validators=[autocli.basemodel.validators.DescriptionValueValidator()])),
                ('ssh_status', models.BooleanField(default=False, help_text='Status of SSH consction to the device.', verbose_name='SSH status')),
                ('https_status', models.BooleanField(default=False, help_text='Status of HTTPS consction to the device.', verbose_name='HTTPS status')),
                ('hostname', models.CharField(error_messages={'blank': 'IP / DNS name field is mandatory.', 'invalid': 'Enter a valid IP address or DNS resolvable hostname. It must contain 4 to 32 digits, letters and special characters -, _, . or spaces.', 'null': 'IP / DNS name field is mandatory.', 'unique': 'Device with this hostname already exists.'}, help_text='Valid IP address or domain name.', max_length=32, unique=True, validators=[inventory.validators.HostnameValueValidator()], verbose_name='Hostname')),
                ('device_type', models.IntegerField(choices=[(0, 'Undefinded'), (1, 'Autodetect'), (2, 'Cisco IOS'), (3, 'Cisco XR'), (4, 'Cisco XE'), (5, 'Cisco NXOS'), (6, 'Cisco ASA')], default=0, help_text='Type of network device system.', verbose_name='Device type')),
                ('ico', models.IntegerField(choices=[(0, 'static/ico/model/device/switch.svg'), (1, 'static/ico/model/device/border_router.svg'), (2, 'static/ico/model/device/chassis.svg'), (3, 'static/ico/model/device/console.svg'), (4, 'static/ico/model/device/firewall.svg'), (5, 'static/ico/model/device/router.svg'), (6, 'static/ico/model/device/router_firewall.svg'), (7, 'static/ico/model/device/router_wifi_1.svg'), (8, 'static/ico/model/device/router_wifi_2.svg'), (9, 'static/ico/model/device/stack.svg'), (10, 'static/ico/model/device/stack_firewall_1.svg'), (11, 'static/ico/model/device/stack_firewall_2.svg'), (12, 'static/ico/model/device/switch.svg'), (13, 'static/ico/model/device/wifi-connection.svg'), (14, 'static/ico/model/device/wireless-router.svg')], default=0, help_text='Network device graphic representation.', verbose_name='Device Icon')),
                ('ssh_port', models.IntegerField(default=22, help_text='SSH protocol port number.', verbose_name='SSH port')),
                ('https_port', models.IntegerField(default=443, help_text='HTTPS protocol port number.', verbose_name='HTTPS port')),
                ('secret', models.CharField(blank=True, help_text='Network device secret password.', max_length=64, null=True, verbose_name='Secret')),
                ('token', models.CharField(blank=True, help_text='Network device API key.', max_length=128, null=True, verbose_name='API token')),
                ('certificate', models.BooleanField(default=False, help_text='Check network device certificate during HTTPS connection.', verbose_name='Certificate')),
                ('credential', models.ForeignKey(blank=True, help_text='Credential needed to establish SSH / HTTPS connection.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.credential', verbose_name='Credential')),
            ],
            options={
                'verbose_name': 'Model',
                'verbose_name_plural': 'Models',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='folder',
            name='credential',
            field=models.ForeignKey(blank=True, help_text='Folder default credential needed to establish SSH / HTTPS connection.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.credential', verbose_name='Default credential'),
        ),
        migrations.AddField(
            model_name='folder',
            name='devices',
            field=models.ManyToManyField(blank=True, help_text='All devices that belonge to current folder.', to='inventory.Device', verbose_name='Devices'),
        ),
    ]
